{
    "sourceFile": "main_decode.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1722069467269,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1722174304799,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,140 @@\n+import os\r\n+import cv2\r\n+import numpy as np\r\n+from PIL import Image\r\n+from fpdf import FPDF\r\n+import datetime\r\n+\r\n+class DecodeFile:\r\n+    @staticmethod\r\n+    def get_video_path():\r\n+        video_path = input(\"Enter the path to the .mp4 video file: \")\r\n+        if not os.path.isfile(video_path):\r\n+            raise FileNotFoundError(\"The specified video file does not exist.\")\r\n+        return video_path\r\n+\r\n+    @staticmethod\r\n+    def extract_frames_from_video(video_path, frames_dir):\r\n+        print(\"Extracting frames from video...\", end=\"\", flush=True)\r\n+        \r\n+        if not os.path.exists(frames_dir):\r\n+            os.makedirs(frames_dir)\r\n+        \r\n+        video_capture = cv2.VideoCapture(video_path)\r\n+        frame_count = int(video_capture.get(cv2.CAP_PROP_FRAME_COUNT))\r\n+        frame_number = 0\r\n+        \r\n+        while True:\r\n+            ret, frame = video_capture.read()\r\n+            if not ret:\r\n+                break\r\n+\r\n+            frame_file_name = os.path.join(frames_dir, f\"frame_{frame_number}.png\")\r\n+            cv2.imwrite(frame_file_name, frame)\r\n+            frame_number += 1\r\n+\r\n+        video_capture.release()\r\n+        print(\" Done\")\r\n+        return frames_dir\r\n+\r\n+    @staticmethod\r\n+    def convert_frames_to_binary(frames_dir, binary_file_path):\r\n+        print(\"Converting frames to binary...\", end=\"\", flush=True)\r\n+        \r\n+        binary_data = \"\"\r\n+\r\n+        frame_files = sorted([f for f in os.listdir(frames_dir) if f.endswith(\".png\")]\r\n+                             , key=lambda x: int(os.path.splitext(os.path.basename(x))[0].split('_')[1]))\r\n+\r\n+        # print(frame_files)\r\n+        \r\n+        for frame_file in frame_files:\r\n+            frame_path = os.path.join(frames_dir, frame_file)\r\n+            image = Image.open(frame_path).convert('L')\r\n+            binary_content = np.array(image)\r\n+\r\n+            binary_frame = []\r\n+            for row in binary_content:\r\n+                binary_frame.append(''.join('0' if pixel < 128 else '1' for pixel in row))\r\n+            \r\n+            binary_data += ''.join(binary_frame)\r\n+\r\n+        with open(binary_file_path, 'w') as binary_file:\r\n+            binary_file.write(binary_data)\r\n+\r\n+        print(\" Done\")\r\n+        return binary_file_path\r\n+\r\n+    @staticmethod\r\n+    def convert_binary_to_text(binary_file_path, text_file_path):\r\n+        print(\"Converting binary to text...\", end=\"\", flush=True)\r\n+        \r\n+        with open(binary_file_path, 'r') as binary_file:\r\n+            binary_content = binary_file.read()\r\n+\r\n+        # Remove padding\r\n+        binary_content = binary_content.rstrip('1')\r\n+        \r\n+        text_data = bytearray()\r\n+        for i in range(0, len(binary_content), 8):\r\n+            byte = binary_content[i:i+8]\r\n+            if len(byte) == 8:\r\n+                text_data.append(int(byte, 2))\r\n+\r\n+        with open(text_file_path, 'wb') as text_file:\r\n+            text_file.write(text_data)\r\n+\r\n+        print(\" Done\")\r\n+        return text_file_path\r\n+\r\n+    @staticmethod\r\n+    def convert_txt_to_original(txt_file_path):\r\n+        valid_extensions = [\"pdf\", \"zip\", \"docx\", \"jpg\", \"png\"]  # List of valid file extensions\r\n+        user_extension = input(\"Please enter the desired file extension (e.g., pdf, zip, docx, jpg, png): \").strip().lower()\r\n+        \r\n+        if user_extension in valid_extensions:\r\n+            try:\r\n+                new_file_name = txt_file_path.replace(\".txt\", f\".{user_extension}\")\r\n+                print(f\"Converting .txt file to .{user_extension}...\", end=\"\", flush=True)\r\n+                with open(txt_file_path, 'r') as file:\r\n+                    content = file.read()\r\n+\r\n+                # Save the content to the new file with the desired extension\r\n+                with open(new_file_name, 'w') as file:\r\n+                    file.write(content)\r\n+\r\n+                print(\" Done\")\r\n+                return new_file_name\r\n+            except Exception as e:\r\n+                print(f\"Error converting to {user_extension.upper()}: {e}\")\r\n+                return None\r\n+        else:\r\n+            print(\"Invalid file extension. Please try again.\")\r\n+            return None\r\n+\r\n+\r\n+def main():\r\n+    \r\n+    current_time = datetime.datetime.now().strftime(\"%Y%m%d_%H%M%S\")\r\n+    decoded_videos_dir = f\"decoded_videos/{current_time}\"\r\n+    if not os.path.exists(decoded_videos_dir):\r\n+        os.makedirs(decoded_videos_dir)\r\n+    \r\n+    video_path = DecodeFile.get_video_path()\r\n+    \r\n+    frames_dir = os.path.join(decoded_videos_dir, \"extracted_frames\")\r\n+    binary_file_path = os.path.join(decoded_videos_dir, \"frames_binary.txt\")\r\n+    text_file_path = os.path.join(decoded_videos_dir, \"text_from_binary.txt\")\r\n+\r\n+    DecodeFile.extract_frames_from_video(video_path, frames_dir)\r\n+    DecodeFile.convert_frames_to_binary(frames_dir, binary_file_path)\r\n+    DecodeFile.convert_binary_to_text(binary_file_path, text_file_path)\r\n+    pdf_file_path = DecodeFile.convert_txt_to_original(text_file_path)\r\n+    \r\n+    if pdf_file_path:\r\n+        print(f\"Original file reconstructed and saved at: {pdf_file_path}\")\r\n+    else:\r\n+        print(\"Failed to convert the text file to PDF.\")\r\n+\r\n+if __name__ == \"__main__\":\r\n+    main()\r\n"
                },
                {
                    "date": 1722174346185,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,140 @@\n+import os\r\n+import cv2\r\n+import numpy as np\r\n+from PIL import Image\r\n+from fpdf import FPDF\r\n+import datetime\r\n+\r\n+class DecodeFile:\r\n+    @staticmethod\r\n+    def get_video_path():\r\n+        video_path = input(\"Enter the path to the .mp4 video file: \")\r\n+        if not os.path.isfile(video_path):\r\n+            raise FileNotFoundError(\"The specified video file does not exist.\")\r\n+        return video_path\r\n+\r\n+    @staticmethod\r\n+    def extract_frames_from_video(video_path, frames_dir):\r\n+        print(\"Extracting frames from video...\", end=\"\", flush=True)\r\n+        \r\n+        if not os.path.exists(frames_dir):\r\n+            os.makedirs(frames_dir)\r\n+        \r\n+        video_capture = cv2.VideoCapture(video_path)\r\n+        frame_count = int(video_capture.get(cv2.CAP_PROP_FRAME_COUNT))\r\n+        frame_number = 0\r\n+        \r\n+        while True:\r\n+            ret, frame = video_capture.read()\r\n+            if not ret:\r\n+                break\r\n+\r\n+            frame_file_name = os.path.join(frames_dir, f\"frame_{frame_number}.png\")\r\n+            cv2.imwrite(frame_file_name, frame)\r\n+            frame_number += 1\r\n+\r\n+        video_capture.release()\r\n+        print(\" Done\")\r\n+        return frames_dir\r\n+\r\n+    @staticmethod\r\n+    def convert_frames_to_binary(frames_dir, binary_file_path):\r\n+        print(\"Converting frames to binary...\", end=\"\", flush=True)\r\n+        \r\n+        binary_data = \"\"\r\n+\r\n+        frame_files = sorted([f for f in os.listdir(frames_dir) if f.endswith(\".png\")]\r\n+                             , key=lambda x: int(os.path.splitext(os.path.basename(x))[0].split('_')[1]))\r\n+\r\n+        # print(frame_files)\r\n+        \r\n+        for frame_file in frame_files:\r\n+            frame_path = os.path.join(frames_dir, frame_file)\r\n+            image = Image.open(frame_path).convert('L')\r\n+            binary_content = np.array(image)\r\n+\r\n+            binary_frame = []\r\n+            for row in binary_content:\r\n+                binary_frame.append(''.join('0' if pixel < 128 else '1' for pixel in row))\r\n+            \r\n+            binary_data += ''.join(binary_frame)\r\n+\r\n+        with open(binary_file_path, 'w') as binary_file:\r\n+            binary_file.write(binary_data)\r\n+\r\n+        print(\" Done\")\r\n+        return binary_file_path\r\n+\r\n+    @staticmethod\r\n+    def convert_binary_to_text(binary_file_path, text_file_path):\r\n+        print(\"Converting binary to text...\", end=\"\", flush=True)\r\n+        \r\n+        with open(binary_file_path, 'r') as binary_file:\r\n+            binary_content = binary_file.read()\r\n+\r\n+        # Remove padding\r\n+        binary_content = binary_content.rstrip('1')\r\n+        \r\n+        text_data = bytearray()\r\n+        for i in range(0, len(binary_content), 8):\r\n+            byte = binary_content[i:i+8]\r\n+            if len(byte) == 8:\r\n+                text_data.append(int(byte, 2))\r\n+\r\n+        with open(text_file_path, 'wb') as text_file:\r\n+            text_file.write(text_data)\r\n+\r\n+        print(\" Done\")\r\n+        return text_file_path\r\n+\r\n+    @staticmethod\r\n+    def convert_txt_to_original(txt_file_path):\r\n+        valid_extensions = [\"pdf\", \"zip\", \"docx\", \"jpg\", \"png\"]  # List of valid file extensions\r\n+        user_extension = input(\"Please enter the desired file extension (e.g., pdf, zip, docx, jpg, png): \").strip().lower()\r\n+        \r\n+        if user_extension in valid_extensions:\r\n+            try:\r\n+                new_file_name = txt_file_path.replace(\".txt\", f\".{user_extension}\")\r\n+                print(f\"Converting .txt file to .{user_extension}...\", end=\"\", flush=True)\r\n+                with open(txt_file_path, 'r') as file:\r\n+                    content = file.read()\r\n+\r\n+                # Save the content to the new file with the desired extension\r\n+                with open(new_file_name, 'w') as file:\r\n+                    file.write(content)\r\n+\r\n+                print(\" Done\")\r\n+                return new_file_name\r\n+            except Exception as e:\r\n+                print(f\"Error converting to {user_extension.upper()}: {e}\")\r\n+                return None\r\n+        else:\r\n+            print(\"Invalid file extension. Please try again.\")\r\n+            return None\r\n+\r\n+\r\n+def main():\r\n+    \r\n+    current_time = datetime.datetime.now().strftime(\"%Y%m%d_%H%M%S\")\r\n+    decoded_videos_dir = f\"decoded_videos/{current_time}\"\r\n+    if not os.path.exists(decoded_videos_dir):\r\n+        os.makedirs(decoded_videos_dir)\r\n+    \r\n+    video_path = DecodeFile.get_video_path()\r\n+    \r\n+    frames_dir = os.path.join(decoded_videos_dir, \"extracted_frames\")\r\n+    binary_file_path = os.path.join(decoded_videos_dir, \"frames_binary.txt\")\r\n+    text_file_path = os.path.join(decoded_videos_dir, \"text_from_binary.txt\")\r\n+\r\n+    DecodeFile.extract_frames_from_video(video_path, frames_dir)\r\n+    DecodeFile.convert_frames_to_binary(frames_dir, binary_file_path)\r\n+    DecodeFile.convert_binary_to_text(binary_file_path, text_file_path)\r\n+    pdf_file_path = DecodeFile.convert_txt_to_original(text_file_path)\r\n+    \r\n+    if pdf_file_path:\r\n+        print(f\"Original file reconstructed and saved at: {pdf_file_path}\")\r\n+    else:\r\n+        print(\"Failed to convert the text file to PDF.\")\r\n+\r\n+if __name__ == \"__main__\":\r\n+    main()\r\n"
                }
            ],
            "date": 1722069467269,
            "name": "Commit-0",
            "content": "import os\r\nimport cv2\r\nimport numpy as np\r\nfrom PIL import Image\r\nfrom fpdf import FPDF\r\nimport datetime\r\n\r\nclass DecodeFile:\r\n    @staticmethod\r\n    def get_video_path():\r\n        video_path = input(\"Enter the path to the .mp4 video file: \")\r\n        if not os.path.isfile(video_path):\r\n            raise FileNotFoundError(\"The specified video file does not exist.\")\r\n        return video_path\r\n\r\n    @staticmethod\r\n    def extract_frames_from_video(video_path, frames_dir):\r\n        print(\"Extracting frames from video...\", end=\"\", flush=True)\r\n        \r\n        if not os.path.exists(frames_dir):\r\n            os.makedirs(frames_dir)\r\n        \r\n        video_capture = cv2.VideoCapture(video_path)\r\n        frame_count = int(video_capture.get(cv2.CAP_PROP_FRAME_COUNT))\r\n        frame_number = 0\r\n        \r\n        while True:\r\n            ret, frame = video_capture.read()\r\n            if not ret:\r\n                break\r\n\r\n            frame_file_name = os.path.join(frames_dir, f\"frame_{frame_number}.png\")\r\n            cv2.imwrite(frame_file_name, frame)\r\n            frame_number += 1\r\n\r\n        video_capture.release()\r\n        print(\" Done\")\r\n        return frames_dir\r\n\r\n    @staticmethod\r\n    def convert_frames_to_binary(frames_dir, binary_file_path):\r\n        print(\"Converting frames to binary...\", end=\"\", flush=True)\r\n        \r\n        binary_data = \"\"\r\n\r\n        frame_files = sorted([f for f in os.listdir(frames_dir) if f.endswith(\".png\")]\r\n                             , key=lambda x: int(os.path.splitext(os.path.basename(x))[0].split('_')[1]))\r\n\r\n        # print(frame_files)\r\n        \r\n        for frame_file in frame_files:\r\n            frame_path = os.path.join(frames_dir, frame_file)\r\n            image = Image.open(frame_path).convert('L')\r\n            binary_content = np.array(image)\r\n\r\n            binary_frame = []\r\n            for row in binary_content:\r\n                binary_frame.append(''.join('0' if pixel < 128 else '1' for pixel in row))\r\n            \r\n            binary_data += ''.join(binary_frame)\r\n\r\n        with open(binary_file_path, 'w') as binary_file:\r\n            binary_file.write(binary_data)\r\n\r\n        print(\" Done\")\r\n        return binary_file_path\r\n\r\n    @staticmethod\r\n    def convert_binary_to_text(binary_file_path, text_file_path):\r\n        print(\"Converting binary to text...\", end=\"\", flush=True)\r\n        \r\n        with open(binary_file_path, 'r') as binary_file:\r\n            binary_content = binary_file.read()\r\n\r\n        # Remove padding\r\n        binary_content = binary_content.rstrip('1')\r\n        \r\n        text_data = bytearray()\r\n        for i in range(0, len(binary_content), 8):\r\n            byte = binary_content[i:i+8]\r\n            if len(byte) == 8:\r\n                text_data.append(int(byte, 2))\r\n\r\n        with open(text_file_path, 'wb') as text_file:\r\n            text_file.write(text_data)\r\n\r\n        print(\" Done\")\r\n        return text_file_path\r\n\r\n    @staticmethod\r\n    def convert_txt_to_original(txt_file_path):\r\n        valid_extensions = [\"pdf\", \"zip\", \"docx\", \"jpg\", \"png\"]  # List of valid file extensions\r\n        user_extension = input(\"Please enter the desired file extension (e.g., pdf, zip, docx, jpg, png): \").strip().lower()\r\n        \r\n        if user_extension in valid_extensions:\r\n            try:\r\n                new_file_name = txt_file_path.replace(\".txt\", f\".{user_extension}\")\r\n                print(f\"Converting .txt file to .{user_extension}...\", end=\"\", flush=True)\r\n                with open(txt_file_path, 'r') as file:\r\n                    content = file.read()\r\n\r\n                # Save the content to the new file with the desired extension\r\n                with open(new_file_name, 'w') as file:\r\n                    file.write(content)\r\n\r\n                print(\" Done\")\r\n                return new_file_name\r\n            except Exception as e:\r\n                print(f\"Error converting to {user_extension.upper()}: {e}\")\r\n                return None\r\n        else:\r\n            print(\"Invalid file extension. Please try again.\")\r\n            return None\r\n\r\n\r\ndef main():\r\n    \r\n    current_time = datetime.datetime.now().strftime(\"%Y%m%d_%H%M%S\")\r\n    decoded_videos_dir = f\"decoded_videos/{current_time}\"\r\n    if not os.path.exists(decoded_videos_dir):\r\n        os.makedirs(decoded_videos_dir)\r\n    \r\n    video_path = DecodeFile.get_video_path()\r\n    \r\n    frames_dir = os.path.join(decoded_videos_dir, \"extracted_frames\")\r\n    binary_file_path = os.path.join(decoded_videos_dir, \"frames_binary.txt\")\r\n    text_file_path = os.path.join(decoded_videos_dir, \"text_from_binary.txt\")\r\n\r\n    DecodeFile.extract_frames_from_video(video_path, frames_dir)\r\n    DecodeFile.convert_frames_to_binary(frames_dir, binary_file_path)\r\n    DecodeFile.convert_binary_to_text(binary_file_path, text_file_path)\r\n    # pdf_file_path = DecodeFile.convert_txt_to_original(text_file_path)\r\n    \r\n    # if pdf_file_path:\r\n    #     print(f\"Original file reconstructed and saved at: {pdf_file_path}\")\r\n    # else:\r\n    #     print(\"Failed to convert the text file to PDF.\")\r\n\r\nif __name__ == \"__main__\":\r\n    main()\r\n"
        }
    ]
}